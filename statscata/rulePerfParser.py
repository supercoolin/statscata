
from typing import List, Dict, Any
from .common import parse_timestamp, json_str_compact
import json
tstamp_sep = r'{"timestamp"'
class RuleStat:
    """
    The class containing various metrics for a single rule from a RulePerfSample
    """
    def __init__(self, data: Dict[str, Any]) -> None:
        self.sid = int(data['signature_id'])
        self.checks = int(data['checks'])
        self.matches = int(data['matches'])
        self.ticks_avg_match = float(data['ticks_avg_match'])
        self.ticks_avg_nomatch = float(data['ticks_avg_nomatch'])

class RulePerfSample:
    def __init__(self, data: Dict[Dict, Any]) -> None:
        self.timestamp = parse_timestamp(data['timestamp'])
        self.rule_stats = []
        for rule in data['rules']:
            self.rule_stats.append(RuleStat(rule))
        self.rule_stats_by_sid = {r.sid: r for r in self.rule_stats}
class RulePerfParser:
    """
    Parses the rule performances statistics generated by suricata in profiling mode
    typically, the file us called rule_perf.json. The data is structured by timestamp, the first one is latest one.
    """
    def __init__(self, filename: str, cleanup_before=True, from_str:bool=False) -> None:
        """
        filename: str: the path to the rule_perf.json file
        cleanup_before: bool: whether to clean up the text file before parsing. 
                            This should not prevent parsing normal files, but if there is a problem you can disable this.
        from_str: bool: if True, the filename is actually a string containing the json data
        """
        if from_str:
            content = filename
        else:
            with open(filename, 'r') as f:
                content = f.read()
        content = json_str_compact(content)
        sample_scratch = content.split(tstamp_sep)
        samples_str = [tstamp_sep + s for s in sample_scratch[1:]]
        samples = [json.loads(s) for s in samples_str]
        self.samples = sorted([RulePerfSample(s) for s in samples], key=lambda x: x.timestamp)

        
